<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[简单的Coder]]></title>
  <link href="http://chenglei.me/atom.xml" rel="self"/>
  <link href="http://chenglei.me/"/>
  <updated>2013-03-08T21:48:50+08:00</updated>
  <id>http://chenglei.me/</id>
  <author>
    <name><![CDATA[dlutcat]]></name>
    <email><![CDATA[pat.inside@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac英文系统下iTunes导入中文歌曲乱码的解决方法]]></title>
    <link href="http://chenglei.me/blog/2013/03/08/macying-wen-xi-tong-xia-itunesdao-ru-zhong-wen-ge-qu-luan-ma-de-jie-jue-fang-fa/"/>
    <updated>2013-03-08T20:09:00+08:00</updated>
    <id>http://chenglei.me/blog/2013/03/08/macying-wen-xi-tong-xia-itunesdao-ru-zhong-wen-ge-qu-luan-ma-de-jie-jue-fang-fa</id>
    <content type="html"><![CDATA[<p>为了命令行的方便，我的Mac一直用的都是英文的系统。今天我往iTunes里导入中文歌曲的时候发现歌曲名，专辑名，作者名全是乱码，网上搜到的解决方案没有几个靠谱的。于是，还是自己用Python写了个脚本来搞定吧。</p>

<p>我的MP3文件的ID3信息编码都是GBK的，把它转成UTF8就OK了。读写ID3信息的库我用的是<a href="https://code.google.com/p/mutagen/">Mutagen</a>，接口简单，示例文档小巧。我在转编码的时候遇到一个难点，就是怎么把下面unicode中的编码decode?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">u&quot;COMM==&#39;chi&#39;=www.lizhizhuangbi.com</span><span class="se">\n</span><span class="s">TALB=</span><span class="se">\xb1\xbb\xbd\xfb\xbc\xc9\xb5\xc4\xd3\xce\xcf\xb7\n</span><span class="s">TDRC=2004</span><span class="se">\n</span><span class="s">TIT2=</span><span class="se">\xbf\xa8\xb7\xf2\xbf\xa8\n</span><span class="s">TPE1=</span><span class="se">\xc0\xee\xd6\xbe\n</span><span class="s">TPE2=</span><span class="se">\xc0\xee\xd6\xbe</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>看上去原信息是GBK编码，可是怎么decode呢?Mutagen返回的直接就是unicode，没法decode 。最后只能尝试直接读取字符流，然后按照GBK来decode才成功。下面的<code>decode_gbk_from_unicode(s)</code>就是实现逻辑。</p>

<div><script src='https://gist.github.com/5115640.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信公众账号LinuxTips归档]]></title>
    <link href="http://chenglei.me/blog/2013/02/08/linuxzhong-duan-chang-yong-ji-qiao-zong-jie-wei-xin-linuxtipsgui-dang/"/>
    <updated>2013-02-08T21:18:00+08:00</updated>
    <id>http://chenglei.me/blog/2013/02/08/linuxzhong-duan-chang-yong-ji-qiao-zong-jie-wei-xin-linuxtipsgui-dang</id>
    <content type="html"><![CDATA[<h3>由来</h3>

<p>前些天申请了一个微信公众账号<code>LinuxTips</code>，顾名思义，用来推荐一些常用或有用但不太熟知的技巧，多多少少希望能对Linux初学者有一些帮助。连续发了一两周下来发现订阅者越来越多，说明还是有些帮助，所以我准备把这事儿坚持下去。我准备用这篇日志来记录<code>LinuxTips</code>的历史发布，方便大家日后查阅。</p>

<h3>LinuxTips使用指南</h3>

<p>在此之前，我先列一下未来<code>LinuxTips</code>的一些使用技巧和上线时间，一方面是来督促自己认真对待这个事儿，一方面也是为了给大家提供一个简单使用指南，一些简单的操作命令（不定期地添加新的命令）：</p>

<ul>
<li><code>ls</code> 或 <code>help</code>  查看可用命令</li>
<li><code>history</code>  查看历史发布的Tips</li>
<li><code>about</code>  关于</li>
<li><code>m+11位手机号码</code>  手机号码归属地查询</li>
</ul>


<h3>LinuxTips历史归档</h3>

<div><script src='https://gist.github.com/4739126.js'></script>
<noscript><pre><code># 以root身份执行上一条命令
$ sudo!!

# 返回用户主目录
$ cd

# 返回前一次所在目录
$ cd -

# Python自带的简易httpserver，可以serve当前目录。方便多平台的文件分享。
$ python -m SimpleHTTPServer

# 清空文件内容
$ &gt; file.txt  

# 快速在终端查看ASCII码表
$ man ascii

# 获取本机的外网IP，该命令需要联网。感谢 http://ifconfig.me/ 
$ curl ifconfig.me

# 剪切从光标到行首/粘贴上一次剪切的内容
Ctrl + u/y
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[离开校园进入社会需要明白的几件事情]]></title>
    <link href="http://chenglei.me/blog/2012/12/17/chi-kai-xiao-yuan-jin-ru-she-hui-xu-yao-ming-bai-de-ji-jian-shi-qing/"/>
    <updated>2012-12-17T23:01:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/12/17/chi-kai-xiao-yuan-jin-ru-she-hui-xu-yao-ming-bai-de-ji-jian-shi-qing</id>
    <content type="html"><![CDATA[<p>前两天从HN的Top10中看到一个Post：<a href="http://zackshapiro.com/post/22010015010/9-things-i-wish-someone-had-told-me-about-life-after">9 things I wish someone had told me about life after college</a>，从自己离开大学到现在工作3年的经验来看，这些建议还是很中肯的。</p>

<p>这里自己根据文中建议和自己的感悟归纳出来几点，希望以后自己能够常常想起这些意见。</p>

<ol>
<li>做好迎接一个完全不同的世界。这里再也没有寒暑假。</li>
<li>学校走出来，健身房走进去。保持活力，应对生活和工作的节奏与压力。</li>
<li>尽量多参与集体饭局，记下大家的电话号码。</li>
<li>保持大学时候的兴趣爱好。比如，踢球，游泳，瑜伽，阅读。你可以结识到一些很优秀的志同道合的朋友。</li>
<li>留意自己身边的小幸福。</li>
<li>生活要保持规律。早起，晚睡。年轻人晚睡一些没有多大关系，保证一天7个小时睡眠足矣。好好利用剩下的17个小时。</li>
<li>努力工作，待人友善。</li>
<li>好好利用互联网这个老师，它会帮你发现自己潜在的价值。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多服务器管理之Fabric]]></title>
    <link href="http://chenglei.me/blog/2012/11/25/duo-fu-wu-qi-guan-li-zhi-fabric/"/>
    <updated>2012-11-25T15:38:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/11/25/duo-fu-wu-qi-guan-li-zhi-fabric</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>最近公司服务器从单机扩展到三机，新环境的搭建和部署也采用了新的自动化方式：<a href="http://docs.fabfile.org/en/1.5/">Fabric</a>。</p>

<h3>什么是Fabric</h3>

<p>用<a href="http://docs.fabfile.org/en/1.5/">Fabric</a>其实就是一套用Python封装了基于SSH的常见操作的库。因此，它的优势显而易见：</p>

<ol>
<li>你可以用Python代理Shell来做运维工作。</li>
<li>方便集中式管理多台服务器。</li>
</ol>


<h3>怎样使用Fabric</h3>

<p>有Python基础的程序员对Fabric一点都不会陌生，因为它就是Python。<br/>
我们先从一个简单的例子开始：</p>

<figure class='code'><figcaption><span>fabfile.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">local</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">host_type</span><span class="p">():</span>
</span><span class='line'>    <span class="n">local</span><span class="p">(</span><span class="s">&#39;uname -s&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fab host_type
</span></code></pre></td></tr></table></div></figure>


<p>上面例子的便是实用fabric在local环境下执行命令<code>uname</code>，就是这么简单。下面在看一个在remote环境下的操作：</p>

<figure class='code'><figcaption><span>fabfile.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">run</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="s">&#39;pat&#39;</span>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">key_filename</span> <span class="o">=</span> <span class="s">&#39;~/.ssh/id_rsa&#39;</span>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s">&#39;patpassword&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">host_type</span><span class="p">():</span>
</span><span class='line'>    <span class="n">run</span><span class="p">(</span><span class="s">&#39;uname -s&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fab host_type
</span></code></pre></td></tr></table></div></figure>


<p>注意，这次我们用<code>run</code>代替了<code>local</code>，它的意思是在remote机器上执行某命令。当然，能够从local连接到remote，并且有执行权限才可以执行，这些都是可以在<code>env</code>中指定的。<code>env</code>结论是整个fabric脚本执行中的一个全局变量，<code>env.user</code>，<code>env.key_filename</code>和<code>env.password</code>都是<code>env</code>的保留关键字，分别指明登陆remote的user，密钥以及密码。密钥和密码可以是二选一。密码在使用<code>sudo</code>命令的时候是必须的。<br/>
如果我们想要管理多台remote服务器的时候该怎么做呢？好，我现在开始介绍。<br/>
首先，我需要引入Fabric中的一个概念：<strong>role</strong>。你可以把<strong>role</strong>理解成remote的标识，它可以是一个remote，也可以是一组remotes，通常我们在fabfile中是用<code>env.roledefs</code>来定义的，然后通过指定<code>env.roles</code>来决定使用那一个/组roles。</p>

<figure class='code'><figcaption><span>fabfile.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">roledefs</span> <span class="o">=</span><span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;local&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;localhost&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;prd_1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;192.168.0.100&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;prd_2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;192.168.0.101&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;prd_3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;192.168.0.102&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;product&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;192.168.0.100&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;192.168.0.101&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;192.168.0.102&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">prd_1</span><span class="p">():</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="s">&#39;pat&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">key_filename</span> <span class="o">=</span> <span class="s">&#39;xxxx&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s">&#39;patpassword&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">roles</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;prd1&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">prd_2</span><span class="p">():</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="s">&#39;pat&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">key_filename</span> <span class="o">=</span> <span class="s">&#39;xxxx&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s">&#39;patpassword&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">roles</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;prd2&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">prd_3</span><span class="p">():</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="s">&#39;pat&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">key_filename</span> <span class="o">=</span> <span class="s">&#39;xxxxx&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s">&#39;patpassword&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">roles</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;prd3&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">product</span><span class="p">():</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="s">&#39;pat&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">key_filename</span> <span class="o">=</span> <span class="s">&#39;xxxx&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s">&#39;patpassword&#39;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">roles</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;product&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">host_type</span><span class="p">():</span>
</span><span class='line'>    <span class="n">run</span><span class="p">(</span><span class="s">&#39;uname -s&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>调用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 只在prd_1上执行</span>
</span><span class='line'>fab prd_1 host_type
</span><span class='line'>
</span><span class='line'><span class="c"># 只在prd_2上执行</span>
</span><span class='line'>fab prd_2 host_type
</span><span class='line'>
</span><span class='line'><span class="c"># 同时在三台remote上执行</span>
</span><span class='line'>fab product host_type
</span></code></pre></td></tr></table></div></figure>


<p>看到这里，你是否发现其实<code>fab</code>就是在依次执行后面的方法。嗯，其实道理就是这么简单。</p>

<p>现在，你就可以用Fabric进行自己的集群运维管理了。提示一下，下面两个API不多，先好好了解下Fabric都可以做些什么吧：</p>

<ol>
<li><a href="http://docs.fabfile.org/en/1.5/#core-api">Core API</a></li>
<li><a href="http://docs.fabfile.org/en/1.5/#contrib-api">Contrib API</a></li>
<li>提供一个完整的Fabfile做参考：<a href="https://github.com/samuelclay/NewsBlur/blob/master/fabfile.py">fabfile.py</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么Python函数定义中关键字参数不推荐设置mutable的默认值？]]></title>
    <link href="http://chenglei.me/blog/2012/09/22/wei-shi-yao-pythonhan-shu-ding-yi-zhong-guan-jian-zi-can-shu-bu-tui-jian-she-zhi-mutablede-mo-ren-zhi/"/>
    <updated>2012-09-22T15:55:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/09/22/wei-shi-yao-pythonhan-shu-ding-yi-zhong-guan-jian-zi-can-shu-bu-tui-jian-she-zhi-mutablede-mo-ren-zhi</id>
    <content type="html"><![CDATA[<p>很多关于Python的<a href="http://www.google.com.hk/search?q=python+best+practices&amp;aq=0&amp;oq=python+best+prac&amp;sugexp=chrome,mod=10&amp;sourceid=chrome&amp;ie=UTF-8">Best Practice</a>中都会提到，在函数定义的时候，关键词参数的默认值不要设置成mutable的类型，比如list, dict。那么具体原因是什么呢？之前一直没有去思考，直到膝盖中了一箭。
先看下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">example</span><span class="p">(</span><span class="n">items</span><span class="o">=</span><span class="p">[]):</span>
</span><span class='line'>    <span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">items</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用<code>example()</code>会返回什么呢？第二次，第三次调用又会返回什么呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; example<span class="o">()</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; example<span class="o">()</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;test&#39;</span>, <span class="s1">&#39;test&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; example<span class="o">()</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;test&#39;</span>, <span class="s1">&#39;test&#39;</span>, <span class="s1">&#39;test&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是觉得结果有些意外？是的，这就是Python函数的定义机制：</p>

<blockquote><p>在生命周期中，函数的声明语句只会执行一次，就是在源码被解释器解释的时候，而不是在被调用的时候。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下的网络IP自动切换]]></title>
    <link href="http://chenglei.me/blog/2012/09/18/macxia-de-wang-luo-ipzi-dong-qie-huan/"/>
    <updated>2012-09-18T20:45:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/09/18/macxia-de-wang-luo-ipzi-dong-qie-huan</id>
    <content type="html"><![CDATA[<p>用惯了自己的电脑，我喜欢在公司也自带电脑，由于家里和公司的网络环境不同，而且因为某些原因都需要手动设置IP, Subnet, Router和DNS，这样每天晚上回家和早上上班手动设置会很麻烦，就研究了一下Mac下自动设置。在Mac下面有一个命令<code>networksetup</code>，用man查看，它有很多参数，我们这里要用到以下这些参数：</p>

<h4>查看本机地网络设备</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>networksetup -listallnetworkservices
</span><span class='line'>
</span><span class='line'>An asterisk <span class="o">(</span>*<span class="o">)</span> denotes that a network service is disabled.
</span><span class='line'>Bluetooth DUN
</span><span class='line'>Ethernet
</span><span class='line'>PPPoE Service
</span><span class='line'>FireWire
</span><span class='line'>Wi-Fi
</span></code></pre></td></tr></table></div></figure>


<h4>查看指定网络设备地状态</h4>

<p>例如，查看Wi-Fi的详细状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>networksetup -getinfo Wi-Fi
</span><span class='line'>
</span><span class='line'>Manual Configuration
</span><span class='line'>IP address: 192.168.0.129
</span><span class='line'>Subnet mask: 255.255.255.0
</span><span class='line'>Router: 192.168.0.1
</span><span class='line'>IPv6: Automatic
</span><span class='line'>IPv6 IP address: none
</span><span class='line'>IPv6 Router: none
</span><span class='line'>Wi-Fi ID: e6:ce:8e:10:a6:af
</span></code></pre></td></tr></table></div></figure>


<h4>设置手动IP, Subnet, Router</h4>

<p>例如，把IP设置成<code>192.168.2.129</code>, Router设置为<code>192.168.2.1</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>networksetup -setmanual Wi-Fi 192.168.2.129 255.255.255.0 192.168.2.1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>networksetup -getinfo Wi-Fi
</span><span class='line'>
</span><span class='line'>Manual Configuration
</span><span class='line'>IP address: 192.168.2.129
</span><span class='line'>Subnet mask: 255.255.255.0
</span><span class='line'>Router: 192.168.2.1
</span><span class='line'>IPv6: Automatic
</span><span class='line'>IPv6 IP address: none
</span><span class='line'>IPv6 Router: none
</span><span class='line'>Wi-Fi ID: e6:ce:8e:10:a6:af
</span></code></pre></td></tr></table></div></figure>


<h4>查看和设置DNS</h4>

<p>例如，把DNS从<code>192.169.0.1</code>设置为<code>192.168.2.1</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>networksetup -getdnsservers Wi-Fi
</span><span class='line'>
</span><span class='line'>192.168.0.1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>networksetup -setdnsservers wi-fi 192.168.2.1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>networksetup -getdnsservers Wi-Fi
</span><span class='line'>
</span><span class='line'>192.168.2.1
</span></code></pre></td></tr></table></div></figure>


<h4>实现家里和办公室网络自动切换</h4>

<p>有了以上的命令我们可以在CLI环境下切换了，甚至可以写成切换脚本，比GUI中设置要方便多了。如果想要更懒一点，需要自动切换网络怎么做呢？没问题，我们也可以搞定。思路就是检查当前的wifi热点，如果是家里的就自动设置成家里的配置，反之，设置成办公室地。<br/>
自动检查wifi热点，我们放在开机启动项来做。 从网上找来这么一个方法，可以在CLI环境下调用<code>airport</code>来扫描wifi热点:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/bin/airport
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>airport -s
</span><span class='line'>
</span><span class='line'>SSID BSSID             RSSI CHANNEL HT CC SECURITY <span class="o">(</span>auth/unicast/group<span class="o">)</span>
</span><span class='line'>CMCC 30:49:3b:07:15:66 -76  1       N  US NONE
</span><span class='line'>Tenda c8:3a:35:f4:ad:28 -48  6,+1    Y  CN WPA2<span class="o">(</span>PSK/AES/AES<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，我们就可以写一个小脚本，自动检查网络环境并且自动切换了，我的脚本如下：</p>

<div><script src='https://gist.github.com/3743043.js'></script>
<noscript><pre><code>#!/bin/sh

# happyhouse is my home wifi name
happyhouse=`airport -s | grep happyhouse | wc -l`

if [ &quot;${happyhouse//[[:space:]]}&quot; = '1' ]; then
    networksetup -setmanual wi-fi 192.168.2.129 255.255.255.0 192.168.2.1
    networksetup -setdnsservers wi-fi 192.168.2.1
fi

if [ &quot;${happyhouse//[[:space:]]}&quot; = '0' ]; then
    networksetup -setmanual wi-fi 192.168.0.129 255.255.255.0 192.168.0.1
    networksetup -setdnsservers wi-fi 192.168.0.1
fi

#networksetup -getinfo wi-fi</code></pre></noscript></div>


<h4>把脚本加入自动启动</h4>

<p>Mac的自动启动脚本plist需要存放在：<code>/Library/LaunchDaemons</code></p>

<figure class='code'><figcaption><span>pat.netswitch.plist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>pat.netswitch.plist<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>/Users/patto/bin/netswitch<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>KeepAlive<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;false/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>RunAtLoad<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;true/&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就大功告成了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跟踪Python嵌套函数调用]]></title>
    <link href="http://chenglei.me/blog/2012/08/27/gen-zong-pythonqian-tao-han-shu-diao-yong/"/>
    <updated>2012-08-27T20:05:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/08/27/gen-zong-pythonqian-tao-han-shu-diao-yong</id>
    <content type="html"><![CDATA[<p>今天在浏览Google Reader的时候发现一个好用的工具函数，用来跟踪嵌套调用函数方便debug。<br/>
原文：<a href="http://eli.thegreenplace.net/2012/08/22/easy-tracing-of-nested-function-calls-in-python/">Easy tracing of nested function calls in Python</a></p>

<p>其实是一个装饰器类：</p>

<div><script src='https://gist.github.com/3487991.js'></script>
<noscript><pre><code>import sys
from functools import wraps

class TraceCalls(object):
    &quot;&quot;&quot; Use as a decorator on functions that should be traced. Several
        functions can be decorated - they will all be indented according
        to their call depth.
    &quot;&quot;&quot;
    def __init__(self, stream=sys.stdout, indent_step=2, show_ret=False):
        self.stream = stream
        self.indent_step = indent_step
        self.show_ret = show_ret

        # This is a class attribute since we want to share the indentation
        # level between different traced functions, in case they call
        # each other.
        TraceCalls.cur_indent = 0

    def __call__(self, fn):
        @wraps(fn)
        def wrapper(*args, **kwargs):
            indent = ' ' * TraceCalls.cur_indent
            argstr = ', '.join(
                [repr(a) for a in args] +
                [&quot;%s=%s&quot; % (a, repr(b)) for a, b in kwargs.items()])
            self.stream.write('%s%s(%s)\n' % (indent, fn.__name__, argstr))

            TraceCalls.cur_indent += self.indent_step
            ret = fn(*args, **kwargs)
            TraceCalls.cur_indent -= self.indent_step

            if self.show_ret:
                self.stream.write('%s--&gt; %s\n' % (indent, ret))
            return ret
        return wrapper


#=================== Test Case 1

@TraceCalls()
def iseven(n):
    return True if n == 0 else isodd(n - 1)

@TraceCalls()
def isodd(n):
    return False if n == 0 else iseven(n - 1)

print(iseven(7))


&quot;&quot;&quot; Output:
iseven(7)
  isodd(6)
    iseven(5)
      isodd(4)
        iseven(3)
          isodd(2)
            iseven(1)
              isodd(0)
False
&quot;&quot;&quot;

#=================== Test Case 2

@TraceCalls(indent_step=4, show_ret=True)
def flatten(lst):
    if isinstance(lst, list):
        return sum((flatten(item) for item in lst), [])
    else:
        return [lst]

list(flatten([1, 2, [3, [4, 5], 6, [7, [9], 12]], 4, [6, 9]]))

&quot;&quot;&quot;
flatten([1, 2, [3, [4, 5], 6, [7, [9], 12]], 4, [6, 9]])
    flatten(1)
    --&gt; [1]
    flatten(2)
    --&gt; [2]
    flatten([3, [4, 5], 6, [7, [9], 12]])
        flatten(3)
        --&gt; [3]
        flatten([4, 5])
            flatten(4)
            --&gt; [4]
            flatten(5)
            --&gt; [5]
        --&gt; [4, 5]
        flatten(6)
        --&gt; [6]
        flatten([7, [9], 12])
            flatten(7)
            --&gt; [7]
            flatten([9])
                flatten(9)
                --&gt; [9]
            --&gt; [9]
            flatten(12)
            --&gt; [12]
        --&gt; [7, 9, 12]
    --&gt; [3, 4, 5, 6, 7, 9, 12]
    flatten(4)
    --&gt; [4]
    flatten([6, 9])
        flatten(6)
        --&gt; [6]
        flatten(9)
        --&gt; [9]
    --&gt; [6, 9]
--&gt; [1, 2, 3, 4, 5, 6, 7, 9, 12, 4, 6, 9]
&quot;&quot;&quot;</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python线程和gevent简易服务器实现对比]]></title>
    <link href="http://chenglei.me/blog/2012/08/05/pythonxian-cheng-he-geventjian-yi-fu-wu-qi-shi-xian-dui-bi/"/>
    <updated>2012-08-05T23:12:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/08/05/pythonxian-cheng-he-geventjian-yi-fu-wu-qi-shi-xian-dui-bi</id>
    <content type="html"><![CDATA[<h3>记前</h3>

<p>最近项目上线，终于迎来了一个双休日，宅在家里眼瞅着肚子上的赘肉一圈一圈，实在不敢相信当年我是那个“怎么吃都不长肉”的瘦身少年。瘦子没法理解胖子的痛，瘦子终于有了同感。于是乎，待到晚上9点半开始了跑步，拉力器，仰卧起坐等一系列瘦身塑形锻炼。大汗淋漓地冲了一个澡，爽！</p>

<h3>正文</h3>

<p>用Python也有两年了，很少在生产中用到线程来设计程序，最近看到两篇不错的文章，准备自己记录一下。原文在这里：</p>

<ul>
<li><a href="http://blog.pythonisito.com/2012/07/introduction-to-gevent.html">Introduction to Gevent</a></li>
<li><a href="http://blog.pythonisito.com/2012/07/gevent-threads-and-benchmarks.html">Gevent, Threads, and Benchmarks</a></li>
</ul>


<h3>插曲</h3>

<p>MD，写到这里接到老大地bug报告，修完了一个SB地Bug回来继续。</p>

<h3>单进程单线程服务器(无实用价值)</h3>

<figure class='code'><figcaption><span> (webserver_single_thread.py)</span> <a href='http://chenglei.me/downloads/code/webserver_single_thread.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sequential</span><span class="p">(</span><span class="n">port</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">handle_request</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sequential</span><span class="p">(</span><span class="mi">4444</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
批注：没有人会用单线程做服务器，除非你是像我现在一样用来练习。</p>

<h3>单进程多线程服务器(无实用价值)</h3>

<figure class='code'><figcaption><span> (webserver_multi_threads.py)</span> <a href='http://chenglei.me/downloads/code/webserver_multi_threads.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">threads</span><span class="p">(</span><span class="n">port</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">handle_request</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">threads</span><span class="p">(</span><span class="mi">4444</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>批注：多线程之间的切换也是很耗资源的事情，所以就有了下面的线程池。</p>

<h3>单进程线程池服务器(无实用价值)</h3>

<figure class='code'><figcaption><span> (webserver_thread_pool.py)</span> <a href='http://chenglei.me/downloads/code/webserver_thread_pool.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Queue</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">server</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">thread_worker</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Ready and waiting with </span><span class="si">%d</span><span class="s"> threads on port </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">cli</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">thread_worker</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sock</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class='line'>    <span class="n">handle_request</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">server</span><span class="p">(</span><span class="mi">4444</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>批注：受到Python的GIL的制约。</p>

<h3>单进程gevent服务器(无实用价值)</h3>

<figure class='code'><figcaption><span> (webserver_gevent.py)</span> <a href='http://chenglei.me/downloads/code/webserver_gevent.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gevent</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gevent</span> <span class="kn">import</span> <span class="n">socket</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">server</span><span class="p">(</span><span class="n">port</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">gevent</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="n">handle_request</span><span class="p">,</span> <span class="n">cli</span><span class="p">,</span> <span class="n">gevent</span><span class="o">.</span><span class="n">sleep</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">server</span><span class="p">(</span><span class="mi">4444</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>批注：研究中。</p>

<h3>gevent协程池服务器(无实用价值)</h3>

<figure class='code'><figcaption><span> (webserver_gevent_pool.py)</span> <a href='http://chenglei.me/downloads/code/webserver_gevent_pool.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gevent</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gevent</span> <span class="kn">import</span> <span class="n">socket</span><span class="p">,</span> <span class="n">sleep</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gevent.pool</span> <span class="kn">import</span> <span class="n">Pool</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">server</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">pool</span> <span class="o">=</span> <span class="n">Pool</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">pool</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="n">handle_request</span><span class="p">,</span> <span class="n">cli</span><span class="p">,</span> <span class="n">gevent</span><span class="o">.</span><span class="n">sleep</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">server</span><span class="p">(</span><span class="mi">4444</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>批注：研究中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python性能分析指南]]></title>
    <link href="http://chenglei.me/blog/2012/07/30/pythonxing-neng-fen-xi-zhi-nan/"/>
    <updated>2012-07-30T16:53:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/07/30/pythonxing-neng-fen-xi-zhi-nan</id>
    <content type="html"><![CDATA[<h2>主题</h2>

<p>介绍几种用于Python程序性能分析的工具和方法。</p>

<h2>思路</h2>

<p>一般情况下，要分析一段代码的性能，可以从下面几个问题入手：</p>

<ol>
<li><strong>目前执行效率如何？</strong></li>
<li><strong>效率瓶颈在哪里？</strong></li>
<li><strong>占用了多少内存？</strong></li>
<li><strong>内存消耗在哪里？</strong></li>
</ol>


<p>下面我们用几个工具来一一解答这些疑问。</p>

<h2>Unix命令行工具: <code>time</code></h2>

<p><code>time</code>是几乎所有*nix系统自带的一个工具，我们可以用它来对程序进行初步的分析：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time python yourprogram.py
</span><span class='line'>
</span><span class='line'>real    0m1.028s
</span><span class='line'>user    0m0.001s
</span><span class='line'>sys     0m0.003s</span></code></pre></td></tr></table></div></figure>


<p>输出的三条数据的具体含义可以参考这里：<a href="http://stackoverflow.com/questions/556405/what-do-real-user-and-sys-mean-in-the-output-of-time1">What do &#8216;real&#8217;, &#8216;user&#8217; and &#8216;sys&#8217; mean in the output of time(1)?</a>。这里给出简单的说明：</p>

<ul>
<li><code>real</code> - 时钟时间。从程序开始到结束流逝的时间(actual elapsed time)，包括其他进程占用的时间，比如IO等待时间。</li>
<li><code>user</code> - 内核之外（用户空间）该进程占用时间(cpu time)。</li>
<li><code>sys</code> - 该进程的内核执行时间(cpu time)</li>
</ul>


<p>如果发现<code>sys</code>和<code>user</code>的时间之和远小于<code>real</code>就说明我们的程序很有可能在IO等待上花费了大量时间。</p>

<h2>自定义Timer类</h2>

<div><script src='https://gist.github.com/3205931.js'></script>
<noscript><pre><code>import time

class Timer(object):
    def __init__(self, verbose=False):
        self.verbose = verbose

    def __enter__(self):
        self.start = time.time()
        return self

    def __exit__(self, *args):
        self.end = time.time()
        self.secs = self.end - self.start
        self.msecs = self.secs * 1000  # millisecs
        if self.verbose:
            print 'elapsed time: %f ms' % self.msecs

###################

from timer import Timer
from redis import Redis
rdb = Redis()

with Timer() as t:
    rdb.lpush(&quot;foo&quot;, &quot;bar&quot;)
print &quot;=&gt; elasped lpush: %s s&quot; % t.secs

with Timer as t:
    rdb.lpop(&quot;foo&quot;)
print &quot;=&gt; elasped lpop: %s s&quot; % t.secs</code></pre></noscript></div>


<p>可以把时间输出到一个性能日志文件，比如profile.log，方便以后分析我们程序的性能瓶颈。</p>

<h2>行执行时间分析：<a href="http://packages.python.org/line_profiler/"><code>line_profiler</code></a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中文日志支持怎么样]]></title>
    <link href="http://chenglei.me/blog/2012/07/29/zhong-wen-ri-zhi-zhi-chi-zen-yao-yang/"/>
    <updated>2012-07-29T23:46:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/07/29/zhong-wen-ri-zhi-zhi-chi-zen-yao-yang</id>
    <content type="html"><![CDATA[<p>很牛的嘛，中文都转换成拼音了。</p>

<h3>来一段<code>Gist</code></h3>

<div><script src='https://gist.github.com/6001.js'></script>
<noscript><pre><code>class Tree
  def Tree.create(&amp;block)
    Tree.new.instance_eval(&amp;block)
  end
  def method_missing(methodname, *args, &amp;block)
    @root = TreeNode.new(methodname.to_s)
    @root.instance_eval(&amp;block) if block_given?
    @root
  end
end</code></pre></noscript></div>


<h3>测试超链接样式</h3>

<p><a href="http://kantuban.com">看图班</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Octopress Blog]]></title>
    <link href="http://chenglei.me/blog/2012/07/29/my-first-octopress-blog/"/>
    <updated>2012-07-29T23:38:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/07/29/my-first-octopress-blog</id>
    <content type="html"><![CDATA[<p>首次使用<code>Octopress</code>，不知道怎么样，先用着看看吧。</p>

<h4>测试代码摘要</h4>

<figure class='code'><figcaption><span>test script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>testdd</p>

<p><img src="http://img.hb.aicdn.com/5319ce74d44bc3c59ea05fd47aebfff9a867563c238eb-dlJu4F_fw554" title="Git Flow" alt="git flow" /></p>
]]></content>
  </entry>
  
</feed>
