<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 简单的Coder]]></title>
  <link href="http://chenglei.me/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://chenglei.me/"/>
  <updated>2013-03-08T22:13:32+08:00</updated>
  <id>http://chenglei.me/</id>
  <author>
    <name><![CDATA[dlutcat]]></name>
    <email><![CDATA[pat.inside@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac英文系统下iTunes导入中文歌曲乱码的解决方法]]></title>
    <link href="http://chenglei.me/blog/2013/03/08/macying-wen-xi-tong-xia-itunesdao-ru-zhong-wen-ge-qu-luan-ma-de-jie-jue-fang-fa/"/>
    <updated>2013-03-08T20:09:00+08:00</updated>
    <id>http://chenglei.me/blog/2013/03/08/macying-wen-xi-tong-xia-itunesdao-ru-zhong-wen-ge-qu-luan-ma-de-jie-jue-fang-fa</id>
    <content type="html"><![CDATA[<p>为了命令行的方便，我的Mac一直用的都是英文的系统。今天我往iTunes里导入中文歌曲的时候发现歌曲名，专辑名，作者名全是乱码，网上搜到的解决方案没有几个靠谱的。于是，还是自己用Python写了个脚本来搞定吧。</p>

<p>我的MP3文件的ID3信息编码都是GBK的，把它转成UTF8就OK了。读写ID3信息的库我用的是<a href="https://code.google.com/p/mutagen/">Mutagen</a>，接口简单，示例文档小巧。我在转编码的时候遇到一个难点，就是怎么把下面unicode中的编码decode?</p>

<p><code>python
s = u"COMM=='chi'=www.lizhizhuangbi.com\nTALB=\xb1\xbb\xbd\xfb\xbc\xc9\xb5\xc4\xd3\xce\xcf\xb7\nTDRC=2004\nTIT2=\xbf\xa8\xb7\xf2\xbf\xa8\nTPE1=\xc0\xee\xd6\xbe\nTPE2=\xc0\xee\xd6\xbe"
</code></p>

<p>看上去原信息是GBK编码，可是怎么decode呢?Mutagen返回的直接就是unicode，没法decode 。最后只能尝试直接读取字符流，然后按照GBK来decode才成功。下面的<code>decode_gbk_from_unicode(s)</code>就是实现逻辑。</p>

<p><div><script src='https://gist.github.com/5115640.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多服务器管理之Fabric]]></title>
    <link href="http://chenglei.me/blog/2012/11/25/duo-fu-wu-qi-guan-li-zhi-fabric/"/>
    <updated>2012-11-25T15:38:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/11/25/duo-fu-wu-qi-guan-li-zhi-fabric</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>最近公司服务器从单机扩展到三机，新环境的搭建和部署也采用了新的自动化方式：<a href="http://docs.fabfile.org/en/1.5/">Fabric</a>。</p>

<h3>什么是Fabric</h3>

<p>用<a href="http://docs.fabfile.org/en/1.5/">Fabric</a>其实就是一套用Python封装了基于SSH的常见操作的库。因此，它的优势显而易见：</p>

<ol>
<li>你可以用Python代理Shell来做运维工作。</li>
<li>方便集中式管理多台服务器。</li>
</ol>


<h3>怎样使用Fabric</h3>

<p>有Python基础的程序员对Fabric一点都不会陌生，因为它就是Python。<br/>
我们先从一个简单的例子开始：</p>

<p>```python fabfile.py
from fabric.api import local</p>

<p>def host_type():</p>

<pre><code>local('uname -s')
</code></pre>

<p><code>
</code>bash</p>

<pre><code>fab host_type
</code></pre>

<p>```</p>

<p>上面例子的便是实用fabric在local环境下执行命令<code>uname</code>，就是这么简单。下面在看一个在remote环境下的操作：</p>

<p>```python fabfile.py
from fabric.api import run</p>

<p>env.user = 'pat'
env.key_filename = '~/.ssh/id_rsa'
env.password = 'patpassword'</p>

<p>def host_type():</p>

<pre><code>run('uname -s')
</code></pre>

<p><code>
</code>bash</p>

<pre><code>fab host_type
</code></pre>

<p>```</p>

<p>注意，这次我们用<code>run</code>代替了<code>local</code>，它的意思是在remote机器上执行某命令。当然，能够从local连接到remote，并且有执行权限才可以执行，这些都是可以在<code>env</code>中指定的。<code>env</code>结论是整个fabric脚本执行中的一个全局变量，<code>env.user</code>，<code>env.key_filename</code>和<code>env.password</code>都是<code>env</code>的保留关键字，分别指明登陆remote的user，密钥以及密码。密钥和密码可以是二选一。密码在使用<code>sudo</code>命令的时候是必须的。<br/>
如果我们想要管理多台remote服务器的时候该怎么做呢？好，我现在开始介绍。<br/>
首先，我需要引入Fabric中的一个概念：<strong>role</strong>。你可以把<strong>role</strong>理解成remote的标识，它可以是一个remote，也可以是一组remotes，通常我们在fabfile中是用<code>env.roledefs</code>来定义的，然后通过指定<code>env.roles</code>来决定使用那一个/组roles。</p>

<p>```python fabfile.py
env.roledefs ={</p>

<pre><code>'local': ['localhost'],
'prd_1': ['192.168.0.100'],
'prd_2': ['192.168.0.101'],
'prd_3': ['192.168.0.102'],
'product': ['192.168.0.100', 
        '192.168.0.101', 
        '192.168.0.102',
        ]
</code></pre>

<p>}</p>

<p>def prd_1():</p>

<pre><code>env.user = 'pat'
env.key_filename = 'xxxx'
env.password = 'patpassword'
env.roles = ['prd1']
</code></pre>

<p>def prd_2():</p>

<pre><code>env.user = 'pat'
env.key_filename = 'xxxx'
env.password = 'patpassword'
env.roles = ['prd2']
</code></pre>

<p>def prd_3():</p>

<pre><code>env.user = 'pat'
env.key_filename = 'xxxxx'
env.password = 'patpassword'
env.roles = ['prd3']
</code></pre>

<p>def product():</p>

<pre><code>env.user = 'pat'
env.key_filename = 'xxxx'
env.password = 'patpassword'
env.roles = ['product']
</code></pre>

<p>def host_type():</p>

<pre><code>run('uname -s')
</code></pre>

<p><code>
</code>bash 调用</p>

<h1>只在prd_1上执行</h1>

<p>fab prd_1 host_type</p>

<h1>只在prd_2上执行</h1>

<p>fab prd_2 host_type</p>

<h1>同时在三台remote上执行</h1>

<p>fab product host_type
```</p>

<p>看到这里，你是否发现其实<code>fab</code>就是在依次执行后面的方法。嗯，其实道理就是这么简单。</p>

<p>现在，你就可以用Fabric进行自己的集群运维管理了。提示一下，下面两个API不多，先好好了解下Fabric都可以做些什么吧：</p>

<ol>
<li><a href="http://docs.fabfile.org/en/1.5/#core-api">Core API</a></li>
<li><a href="http://docs.fabfile.org/en/1.5/#contrib-api">Contrib API</a></li>
<li>提供一个完整的Fabfile做参考：<a href="https://github.com/samuelclay/NewsBlur/blob/master/fabfile.py">fabfile.py</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么Python函数定义中关键字参数不推荐设置mutable的默认值？]]></title>
    <link href="http://chenglei.me/blog/2012/09/22/wei-shi-yao-pythonhan-shu-ding-yi-zhong-guan-jian-zi-can-shu-bu-tui-jian-she-zhi-mutablede-mo-ren-zhi/"/>
    <updated>2012-09-22T15:55:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/09/22/wei-shi-yao-pythonhan-shu-ding-yi-zhong-guan-jian-zi-can-shu-bu-tui-jian-she-zhi-mutablede-mo-ren-zhi</id>
    <content type="html"><![CDATA[<p>很多关于Python的<a href="http://www.google.com.hk/search?q=python+best+practices&amp;aq=0&amp;oq=python+best+prac&amp;sugexp=chrome,mod=10&amp;sourceid=chrome&amp;ie=UTF-8">Best Practice</a>中都会提到，在函数定义的时候，关键词参数的默认值不要设置成mutable的类型，比如list, dict。那么具体原因是什么呢？之前一直没有去思考，直到膝盖中了一箭。
先看下面的例子：</p>

<p>``` python</p>

<pre><code>def example(items=[]):
    items.append("test")
    return items
</code></pre>

<p>```</p>

<p>调用<code>example()</code>会返回什么呢？第二次，第三次调用又会返回什么呢？</p>

<p>``` bash</p>

<pre><code>&gt;&gt;&gt; example()
['test']

&gt;&gt;&gt; example()
['test', 'test']

&gt;&gt;&gt; example()
['test', 'test', 'test']
</code></pre>

<p>```</p>

<p>是不是觉得结果有些意外？是的，这就是Python函数的定义机制：</p>

<blockquote><p>在生命周期中，函数的声明语句只会执行一次，就是在源码被解释器解释的时候，而不是在被调用的时候。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跟踪Python嵌套函数调用]]></title>
    <link href="http://chenglei.me/blog/2012/08/27/gen-zong-pythonqian-tao-han-shu-diao-yong/"/>
    <updated>2012-08-27T20:05:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/08/27/gen-zong-pythonqian-tao-han-shu-diao-yong</id>
    <content type="html"><![CDATA[<p>今天在浏览Google Reader的时候发现一个好用的工具函数，用来跟踪嵌套调用函数方便debug。<br/>
原文：<a href="http://eli.thegreenplace.net/2012/08/22/easy-tracing-of-nested-function-calls-in-python/">Easy tracing of nested function calls in Python</a></p>

<p>其实是一个装饰器类：<br/>
<div><script src='https://gist.github.com/3487991.js'></script>
<noscript><pre><code>import sys
from functools import wraps

class TraceCalls(object):
    &quot;&quot;&quot; Use as a decorator on functions that should be traced. Several
        functions can be decorated - they will all be indented according
        to their call depth.
    &quot;&quot;&quot;
    def __init__(self, stream=sys.stdout, indent_step=2, show_ret=False):
        self.stream = stream
        self.indent_step = indent_step
        self.show_ret = show_ret

        # This is a class attribute since we want to share the indentation
        # level between different traced functions, in case they call
        # each other.
        TraceCalls.cur_indent = 0

    def __call__(self, fn):
        @wraps(fn)
        def wrapper(*args, **kwargs):
            indent = ' ' * TraceCalls.cur_indent
            argstr = ', '.join(
                [repr(a) for a in args] +
                [&quot;%s=%s&quot; % (a, repr(b)) for a, b in kwargs.items()])
            self.stream.write('%s%s(%s)\n' % (indent, fn.__name__, argstr))

            TraceCalls.cur_indent += self.indent_step
            ret = fn(*args, **kwargs)
            TraceCalls.cur_indent -= self.indent_step

            if self.show_ret:
                self.stream.write('%s--&gt; %s\n' % (indent, ret))
            return ret
        return wrapper


#=================== Test Case 1

@TraceCalls()
def iseven(n):
    return True if n == 0 else isodd(n - 1)

@TraceCalls()
def isodd(n):
    return False if n == 0 else iseven(n - 1)

print(iseven(7))


&quot;&quot;&quot; Output:
iseven(7)
  isodd(6)
    iseven(5)
      isodd(4)
        iseven(3)
          isodd(2)
            iseven(1)
              isodd(0)
False
&quot;&quot;&quot;

#=================== Test Case 2

@TraceCalls(indent_step=4, show_ret=True)
def flatten(lst):
    if isinstance(lst, list):
        return sum((flatten(item) for item in lst), [])
    else:
        return [lst]

list(flatten([1, 2, [3, [4, 5], 6, [7, [9], 12]], 4, [6, 9]]))

&quot;&quot;&quot;
flatten([1, 2, [3, [4, 5], 6, [7, [9], 12]], 4, [6, 9]])
    flatten(1)
    --&gt; [1]
    flatten(2)
    --&gt; [2]
    flatten([3, [4, 5], 6, [7, [9], 12]])
        flatten(3)
        --&gt; [3]
        flatten([4, 5])
            flatten(4)
            --&gt; [4]
            flatten(5)
            --&gt; [5]
        --&gt; [4, 5]
        flatten(6)
        --&gt; [6]
        flatten([7, [9], 12])
            flatten(7)
            --&gt; [7]
            flatten([9])
                flatten(9)
                --&gt; [9]
            --&gt; [9]
            flatten(12)
            --&gt; [12]
        --&gt; [7, 9, 12]
    --&gt; [3, 4, 5, 6, 7, 9, 12]
    flatten(4)
    --&gt; [4]
    flatten([6, 9])
        flatten(6)
        --&gt; [6]
        flatten(9)
        --&gt; [9]
    --&gt; [6, 9]
--&gt; [1, 2, 3, 4, 5, 6, 7, 9, 12, 4, 6, 9]
&quot;&quot;&quot;</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python线程和gevent简易服务器实现对比]]></title>
    <link href="http://chenglei.me/blog/2012/08/05/pythonxian-cheng-he-geventjian-yi-fu-wu-qi-shi-xian-dui-bi/"/>
    <updated>2012-08-05T23:12:00+08:00</updated>
    <id>http://chenglei.me/blog/2012/08/05/pythonxian-cheng-he-geventjian-yi-fu-wu-qi-shi-xian-dui-bi</id>
    <content type="html"><![CDATA[<h3>记前</h3>

<p>最近项目上线，终于迎来了一个双休日，宅在家里眼瞅着肚子上的赘肉一圈一圈，实在不敢相信当年我是那个“怎么吃都不长肉”的瘦身少年。瘦子没法理解胖子的痛，瘦子终于有了同感。于是乎，待到晚上9点半开始了跑步，拉力器，仰卧起坐等一系列瘦身塑形锻炼。大汗淋漓地冲了一个澡，爽！</p>

<h3>正文</h3>

<p>用Python也有两年了，很少在生产中用到线程来设计程序，最近看到两篇不错的文章，准备自己记录一下。原文在这里：</p>

<ul>
<li><a href="http://blog.pythonisito.com/2012/07/introduction-to-gevent.html">Introduction to Gevent</a></li>
<li><a href="http://blog.pythonisito.com/2012/07/gevent-threads-and-benchmarks.html">Gevent, Threads, and Benchmarks</a></li>
</ul>


<h3>插曲</h3>

<p>MD，写到这里接到老大地bug报告，修完了一个SB地Bug回来继续。</p>

<h3>单进程单线程服务器(无实用价值)</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (webserver_single_thread.py)</span> <a href='/downloads/code/webserver_single_thread.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sequential</span><span class="p">(</span><span class="n">port</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">handle_request</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sequential</span><span class="p">(</span><span class="mi">4444</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
批注：没有人会用单线程做服务器，除非你是像我现在一样用来练习。</p>

<h3>单进程多线程服务器(无实用价值)</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (webserver_multi_threads.py)</span> <a href='/downloads/code/webserver_multi_threads.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">threads</span><span class="p">(</span><span class="n">port</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">handle_request</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">threads</span><span class="p">(</span><span class="mi">4444</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
批注：多线程之间的切换也是很耗资源的事情，所以就有了下面的线程池。</p>

<h3>单进程线程池服务器(无实用价值)</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (webserver_thread_pool.py)</span> <a href='/downloads/code/webserver_thread_pool.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Queue</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">server</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">thread_worker</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Ready and waiting with </span><span class="si">%d</span><span class="s"> threads on port </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">cli</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">thread_worker</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sock</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class='line'>    <span class="n">handle_request</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">server</span><span class="p">(</span><span class="mi">4444</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
批注：受到Python的GIL的制约。</p>

<h3>单进程gevent服务器(无实用价值)</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (webserver_gevent.py)</span> <a href='/downloads/code/webserver_gevent.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gevent</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gevent</span> <span class="kn">import</span> <span class="n">socket</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">server</span><span class="p">(</span><span class="n">port</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">gevent</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="n">handle_request</span><span class="p">,</span> <span class="n">cli</span><span class="p">,</span> <span class="n">gevent</span><span class="o">.</span><span class="n">sleep</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">server</span><span class="p">(</span><span class="mi">4444</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
批注：研究中。</p>

<h3>gevent协程池服务器(无实用价值)</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (webserver_gevent_pool.py)</span> <a href='/downloads/code/webserver_gevent_pool.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gevent</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gevent</span> <span class="kn">import</span> <span class="n">socket</span><span class="p">,</span> <span class="n">sleep</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gevent.pool</span> <span class="kn">import</span> <span class="n">Pool</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">server</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">pool</span> <span class="o">=</span> <span class="n">Pool</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cli</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>        <span class="n">pool</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="n">handle_request</span><span class="p">,</span> <span class="n">cli</span><span class="p">,</span> <span class="n">gevent</span><span class="o">.</span><span class="n">sleep</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">sleep</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;&#39;&#39;http/1.0 200 OK</span>
</span><span class='line'><span class="s">                  Hello World! &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_WR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">ex</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">ex</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">server</span><span class="p">(</span><span class="mi">4444</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
批注：研究中。</p>
]]></content>
  </entry>
  
</feed>
